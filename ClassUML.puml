@startuml
'https://plantuml.com/class-diagram

package com.micahbaumann {
    package database {
        class DatabaseBase {
            - user: String[1]
            - password: String[1]

            + query(in query: String): void
        }
    }

    package users {
        class User {
            - name: String[1]
            - userID: String[1]

            + getName(): String
            + setName(in name: String): void
            + getID(): String
            + setUserFromDB(in username: String): void
            + updateDBFromUser(): void
        }

        class Chef {
            - price: double[1]
            - bookings: Booking [*]

            + getPrice(): Double
            + setPrice(in price: double): void
        }

        User <|-- Chef
    }

    package bookings {
        enum BookingStatus {
            CONFIRMED
            PENDING
            DENIED
        }

        class Booking {
            - start: Datetime [1]
            - end: Datetime [1]
            - bookingID: String [1]
            - status: BookingStatus

            + getStart(): Datetime
            + setStart(in start: Datetime): void
            + getEnd(): Datetime
            + setEnd(in end: Datetime): void
            + getID(): String
            + setBookingFromDB(in bookingID: String): void
            + updateDBFromBooking(): void
        }

        Booking ..> BookingStatus
    }
    Chef *-- Booking

    package endpoints {
        class BaseController {
            + login(body: LoginBody): void
            + listChefs(): ArrayList<Chef>
            + createAccount(body: CreateAccountBody): void
            + createChef(body: CreateChefBody): void
            + viewChef(): Chef
            + createBooking(body: CreateBookingBody): void
            + viewBookings(): ArrayList<Booking>
            + updateBooking(body: UpdateBookingBody): void
            + refresh(): String
        }

        note right of BaseController::login
          Annotated with:
          @PostMapping("/api/account/login")
        end note

        note right of BaseController::listChefs
          Annotated with:
          @GetMapping("/api/chef/list")
        end note

        note right of BaseController::createAccount
          Annotated with:
          @PostMapping("/api/account/create")
        end note

        note right of BaseController::createChef
          Annotated with:
          @PostMapping("/api/chef/create")
        end note

        note left of BaseController::viewChef
          Annotated with:
          @GetMapping("/api/chef/view/{id}")
        end note

        note right of BaseController::createBooking
          Annotated with:
          @PostMapping("/api/booking/create")
        end note

        note left of BaseController::viewBookings
          Annotated with:
          @GetMapping("/api/booking/view")
        end note

        note right of BaseController::updateBooking
          Annotated with:
          @PutMapping("/api/booking/update/{id}")
        end note

        note left of BaseController::refresh
          Annotated with:
          @GetMapping("/api/token/refresh")
        end note

        package data_models {
            class LoginBody {
                + username: String [1]
                + password: String [1]
            }

            class CreateAccountBody {
                + username: String [1]
                + password: String [1]
            }

            class CreateChefBody {
                + userID: String [1]
                + price: double [1]
            }

            class CreateBookingBody {
                + start: Datetime [1]
                + end: Datetime [1]
            }

            class UpdateBookingBody {
                + start: Datetime [1]
                + end: Datetime [1]
                + status: String [1]
            }
        }

        LoginBody <.. BaseController
        Chef <.. BaseController
        CreateAccountBody <.. BaseController
        CreateChefBody <.. BaseController
        CreateBookingBody <.. BaseController
        UpdateBookingBody <.. BaseController
    }

    BaseController ..> User
    BaseController ..> Chef
    BaseController ..> DatabaseBase
    User ..> DatabaseBase
    Chef ..> DatabaseBase
    BaseController ..> Booking
    BaseController ..> BookingStatus

}

@enduml